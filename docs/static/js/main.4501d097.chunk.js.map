{"version":3,"sources":["redux/hooks.ts","redux/thunk/fetchCounter.ts","redux/state/count.ts","components/Count/Count.tsx","components/Count/index.ts","redux/state/app.ts","components/Menu/Menu.tsx","components/Menu/index.ts","redux/state/spinLogo.ts","components/SpinLogo/logo.svg","components/SpinLogo/SpinLogo.tsx","components/SpinLogo/index.ts","App.tsx","redux/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","judgment","percent","second","Promise","resolve","setTimeout","Math","random","fetchCounter","createAsyncThunk","arg","thunk","a","dispatch","setProgress","res","count","value","Error","countSlice","createSlice","name","initialState","message","progress","reducers","setShowingPercent","state","action","payload","setMessasge","increment","decrement","incrementByAmount","extraReducers","builder","addCase","fetchLastCounter","pending","meta","fulfilled","rejected","actions","countReducer","reducer","Count","countState","shallowEqual","Button","color","onClick","variant","Typography","id","Slider","aria-labelledby","className","disabled","max","min","onChange","e","newValue","valueLabelDisplay","CircularProgress","appSlice","openMenu","component","setOpenMenu","setComponent","appReducer","Menu","appState","IconButton","Drawer","anchor","onClose","open","onKeyDown","role","List","map","text","ListItem","button","ListItemIcon","Cancel","ListItemText","primary","Divider","ExposurePlus1","Autorenew","spinLogoSlice","spin","setSpinLogo","spinLogoReducer","SpinLogo","spinLogoState","alt","src","logo","App","StrictMode","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4501d097.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setProgress } from \"../state/count\";\n\n/**\n * 遅延判定メソッド\n * @param percent 確率\n * @param second 秒数\n * @remarks\n * second秒後にpercent%の確率でtrueを返し、\n * でなければfalseを返す\n */\nconst judgment = (percent: number, second: number) =>\n  new Promise<boolean>((resolve) => {\n    setTimeout(() => {\n      resolve(Math.random() < percent / 100);\n    }, second * 1000);\n  });\n\ntype fetchCounterArgType = {\n  /** 増える確率 */\n  percent: number;\n  /** 秒数 */\n  second: number;\n  /** 値 */\n  value: number;\n};\n\ntype fetchCounterReturnType = {\n  /** 増減値 */\n  count: number;\n};\n\n/**\n * 遅延増減メソッド\n * @remarks\n * 渡された秒数後に渡された確率で渡された値を返し、\n * でなければ例外を返す\n */\nconst fetchCounter = createAsyncThunk<\n  fetchCounterReturnType,\n  fetchCounterArgType\n>(\n  \"lastcount/fetch\",\n  async (arg, thunk): Promise<fetchCounterReturnType> => {\n    thunk.dispatch(setProgress(true));\n\n    const res = await judgment(arg.percent, arg.second);\n\n    thunk.dispatch(setProgress(false));\n\n    if (res) {\n      return { count: arg.value };\n    }\n\n    throw new Error(\"fetch count error\");\n  }\n);\n\nexport default fetchCounter;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fetchLastCounter from \"../thunk/fetchCounter\";\n\n// Define a type for the slice state\ninterface CounterState {\n  /** 表示するメッセージ */\n  message: string;\n  /** プログレスフラグ */\n  progress: boolean;\n  /** カウント値 */\n  count: number;\n  /** 確率 */\n  percent: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  message: \"\",\n  progress: false,\n  count: 0,\n  percent: 50,\n};\nexport const countSlice = createSlice({\n  name: \"count\",\n  initialState,\n  reducers: {\n    setShowingPercent: (state, action: PayloadAction<number>) => {\n      state.percent = action.payload;\n    },\n    setProgress: (state, action: PayloadAction<boolean>) => {\n      state.progress = action.payload;\n    },\n    setMessasge: (state, action: PayloadAction<string>) => {\n      state.message = action.payload;\n    },\n    increment: (state) => {\n      state.count += 1;\n    },\n    decrement: (state) => {\n      state.count -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.count += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchLastCounter.pending, (state, action) => ({\n      ...state,\n      message: `判定中です。${action.meta.arg.second}秒後に${action.meta.arg.percent}%の確率で${action.meta.arg.value}増えます。`,\n    }));\n    builder.addCase(fetchLastCounter.fulfilled, (state, action) => ({\n      ...state,\n      count: state.count + action.payload.count,\n      message: `判定に成功しました。${action.payload.count}増えました。`,\n    }));\n    builder.addCase(fetchLastCounter.rejected, (state) => ({\n      ...state,\n      message: \"判定に失敗しました。1減りました。\",\n      count: state.count - 1,\n    }));\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  setMessasge,\n  setProgress,\n  setShowingPercent,\n} = countSlice.actions;\n\nconst countReducer = countSlice.reducer;\nexport default countReducer;\n","import {\n  Button,\n  CircularProgress,\n  Slider,\n  Typography,\n} from \"@material-ui/core\";\nimport { shallowEqual } from \"react-redux\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport {\n  decrement,\n  increment,\n  setShowingPercent,\n} from \"../../redux/state/count\";\nimport { RootState } from \"../../redux/store\";\nimport fetchLastCounter from \"../../redux/thunk/fetchCounter\";\nimport \"./Count.scss\";\n\nfunction Count(): JSX.Element {\n  const { countState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <p>{countState.count}</p>\n      <p>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            dispatch(increment());\n          }}\n          variant=\"contained\"\n        >\n          増やす\n        </Button>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            dispatch(decrement());\n          }}\n          variant=\"contained\"\n        >\n          減らす\n        </Button>\n      </p>\n      <Typography id=\"percent-slider-label\">\n        確率：{countState.percent}%\n      </Typography>\n      <Slider\n        aria-labelledby=\"percent-slider-label\"\n        className=\"Count-percent-slider\"\n        disabled={countState.progress}\n        max={100}\n        min={0}\n        onChange={(e, newValue: number | number[]) =>\n          dispatch(setShowingPercent(newValue as number))\n        }\n        value={countState.percent}\n        valueLabelDisplay=\"off\"\n      />\n      <p>\n        <Button\n          color=\"default\"\n          disabled={countState.progress}\n          onClick={() => {\n            dispatch(\n              fetchLastCounter({\n                percent: countState.percent,\n                value: 100,\n                second: 3,\n              })\n            );\n          }}\n          variant=\"contained\"\n        >\n          非同期\n        </Button>\n      </p>\n      <Typography color=\"error\">{countState.message}</Typography>\n      {countState.progress && <CircularProgress />}\n    </>\n  );\n}\n\nexport default Count;\n","import Count from \"./Count\";\n\nexport default Count;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// Define a type for the slice state\ninterface AppState {\n  /** メニューを表示するかどうか */\n  openMenu: boolean;\n  /** 表示するコンポーネント */\n  component: \"count\" | \"spinLogo\";\n}\n\n// Define the initial state using that type\nconst initialState: AppState = {\n  openMenu: false,\n  component: \"count\",\n};\nexport const appSlice = createSlice({\n  name: \"app\",\n  initialState,\n  reducers: {\n    setOpenMenu: (state, action: PayloadAction<typeof state.openMenu>) => {\n      state.openMenu = action.payload;\n    },\n    setComponent: (state, action: PayloadAction<typeof state.component>) => {\n      state.component = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setComponent, setOpenMenu } = appSlice.actions;\n\nconst appReducer = appSlice.reducer;\nexport default appReducer;\n","import {\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport {\n  Autorenew,\n  Cancel,\n  ExposurePlus1,\n  Menu as MenuIcon,\n} from \"@material-ui/icons\";\nimport { shallowEqual } from \"react-redux\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { setComponent, setOpenMenu } from \"../../redux/state/app\";\nimport { RootState } from \"../../redux/store\";\nimport \"./Menu.scss\";\n\nfunction Menu(): JSX.Element {\n  const { appState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <div className=\"Menu\">\n        <IconButton onClick={() => dispatch(setOpenMenu(!appState.openMenu))}>\n          <MenuIcon />\n        </IconButton>\n      </div>\n      <Drawer\n        anchor=\"left\"\n        onClose={() => dispatch(setOpenMenu(false))}\n        open={appState.openMenu}\n      >\n        <div onKeyDown={() => dispatch(setOpenMenu(false))} role=\"presentation\">\n          <List>\n            {[\"Cancel\"].map((text) => (\n              <ListItem\n                button\n                key={text}\n                onClick={() => {\n                  dispatch(setOpenMenu(false));\n                }}\n              >\n                <ListItemIcon>\n                  <Cancel />\n                </ListItemIcon>\n                <ListItemText primary=\"閉じる\" />\n              </ListItem>\n            ))}\n          </List>\n          <Divider />\n          <List>\n            {([\"count\", \"spinLogo\"] as typeof appState.component[]).map(\n              (text) => (\n                <ListItem\n                  button\n                  key={text}\n                  onClick={() => {\n                    dispatch(setComponent(text));\n                    dispatch(setOpenMenu(false));\n                  }}\n                >\n                  <ListItemIcon>\n                    {text === \"count\" ? <ExposurePlus1 /> : <Autorenew />}\n                  </ListItemIcon>\n                  <ListItemText primary={text} />\n                </ListItem>\n              )\n            )}\n          </List>\n        </div>\n      </Drawer>\n    </>\n  );\n}\n\nexport default Menu;\n","import Menu from \"./Menu\";\n\nexport default Menu;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// Define a type for the slice state\ninterface SpinLogoState {\n  /** ロゴ回転フラグ */\n  spin: boolean;\n}\n\n// Define the initial state using that type\nconst initialState: SpinLogoState = {\n  spin: false,\n};\nexport const spinLogoSlice = createSlice({\n  name: \"spinLogo\",\n  initialState,\n  reducers: {\n    setSpinLogo: (state, action: PayloadAction<typeof state.spin>) => {\n      state.spin = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setSpinLogo } = spinLogoSlice.actions;\n\nconst spinLogoReducer = spinLogoSlice.reducer;\nexport default spinLogoReducer;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Button } from \"@material-ui/core\";\nimport { shallowEqual } from \"react-redux\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { setSpinLogo } from \"../../redux/state/spinLogo\";\nimport { RootState } from \"../../redux/store\";\nimport logo from \"./logo.svg\";\nimport \"./SpinLogo.scss\";\n\nfunction SpinLogo(): JSX.Element {\n  const { spinLogoState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <img\n        alt=\"logo\"\n        className={spinLogoState.spin ? \"SpinLogo-logo-spin\" : \"SpinLogo-logo\"}\n        src={logo}\n      />\n      <p>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            dispatch(setSpinLogo(!spinLogoState.spin));\n          }}\n          variant=\"contained\"\n        >\n          {spinLogoState.spin ? \"止める\" : \"まわす\"}\n        </Button>\n      </p>\n    </>\n  );\n}\n\nexport default SpinLogo;\n","import SpinLogo from \"./SpinLogo\";\n\nexport default SpinLogo;\n","import React from \"react\";\nimport { shallowEqual } from \"react-redux\";\nimport \"./App.scss\";\nimport Count from \"./components/Count\";\nimport Menu from \"./components/Menu\";\nimport SpinLogo from \"./components/SpinLogo\";\nimport { useAppSelector } from \"./redux/hooks\";\nimport { RootState } from \"./redux/store\";\n\nfunction App(): JSX.Element {\n  const { appState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n\n  return (\n    <>\n      <React.StrictMode>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {appState.component === \"count\" ? (\n              <Count />\n            ) : appState.component === \"spinLogo\" ? (\n              <SpinLogo />\n            ) : null}\n          </header>\n        </div>\n      </React.StrictMode>\n      <Menu />\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport appReducer from \"./state/app\";\nimport countReducer from \"./state/count\";\nimport spinLogoReducer from \"./state/spinLogo\";\n\nexport const store = configureStore({\n  reducer: {\n    countState: countReducer,\n    appState: appReducer,\n    spinLogoState: spinLogoReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}