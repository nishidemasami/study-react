{"version":3,"sources":["redux/hooks.ts","redux/state/app.ts","redux/thunk/fetchCounter.ts","redux/state/count.ts","components/Count/Count.tsx","components/Count/index.ts","redux/state/spinLogo.ts","components/SpinLogo/logo.svg","components/SpinLogo/SpinLogo.tsx","components/SpinLogo/index.ts","components/Menu/MenuItems.tsx","components/Menu/Menu.tsx","components/Menu/index.ts","App.tsx","redux/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","menuList","appSlice","createSlice","name","initialState","openMenu","component","reducers","setOpenMenu","state","action","payload","setComponent","actions","appReducer","reducer","judgment","percent","second","a","Promise","resolve","reject","setTimeout","Math","random","Error","fetchCounter","createAsyncThunk","arg","thunk","dispatch","setProgress","catch","res","count","value","countSlice","message","progress","setShowingPercent","setMessasge","increment","decrement","incrementByAmount","extraReducers","builder","addCase","fetchLastCounter","pending","meta","fulfilled","rejected","countReducer","Count","countState","shallowEqual","Button","color","onClick","variant","Typography","id","Slider","aria-labelledby","className","disabled","max","min","onChange","e","newValue","valueLabelDisplay","CircularProgress","spinLogoSlice","spin","setSpinLogo","spinLogoReducer","SpinLogo","spinLogoState","alt","src","logo","MenuItems","icon","ExposurePlus1","spinLogo","Autorenew","Menu","appState","IconButton","Drawer","anchor","onClose","open","onKeyDown","role","List","ListItem","button","ListItemIcon","Cancel","ListItemText","primary","Divider","map","menu","App","StrictMode","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebcab406.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n/** メニュー一覧タイプ */\nexport type menuComponents = \"count\" | \"spinLogo\";\n\n/** メニューリスト */\nexport const menuList: menuComponents[] = [\"count\", \"spinLogo\"];\n\n// Define a type for the slice state\ninterface AppState {\n  /** メニューを表示するかどうか */\n  openMenu: boolean;\n  /** 表示するコンポーネント */\n  component: menuComponents;\n}\n\n// Define the initial state using that type\nconst initialState: AppState = {\n  openMenu: false,\n  component: \"count\",\n};\n\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState,\n  reducers: {\n    setOpenMenu: (state, action: PayloadAction<typeof state.openMenu>) => {\n      state.openMenu = action.payload;\n    },\n    setComponent: (state, action: PayloadAction<typeof state.component>) => {\n      state.component = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setComponent, setOpenMenu } = appSlice.actions;\n\nconst appReducer = appSlice.reducer;\nexport default appReducer;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setProgress } from \"../state/count\";\n\n/**\n * 遅延判定メソッド\n * @param percent 確率\n * @param second 秒数\n * @remarks\n * second秒後にpercent%の確率でtrueを返し、\n * でなければrejectする\n */\nconst judgment = async (percent: number, second: number) =>\n  new Promise<boolean>((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() < percent / 100) {\n        resolve(true);\n      }\n      reject(new Error());\n    }, second * 1000);\n  });\n\ntype fetchCounterArgType = {\n  /** 増える確率 */\n  percent: number;\n  /** 秒数 */\n  second: number;\n  /** 値 */\n  value: number;\n};\n\ntype fetchCounterReturnType = {\n  /** 増減値 */\n  count: number;\n};\n\n/**\n * 遅延増減メソッド\n * @remarks\n * 渡された秒数後に渡された確率で渡された値を返し、\n * でなければ例外を返す\n */\nconst fetchCounter = createAsyncThunk<\n  fetchCounterReturnType,\n  fetchCounterArgType\n>(\n  \"lastcount/fetch\",\n  async (arg, thunk): Promise<fetchCounterReturnType> => {\n    thunk.dispatch(setProgress(true));\n\n    const res = await judgment(arg.percent, arg.second).catch(() => false);\n\n    thunk.dispatch(setProgress(false));\n\n    if (res) {\n      return { count: arg.value };\n    }\n\n    throw new Error(\"fetch count error\");\n  }\n);\n\nexport default fetchCounter;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fetchLastCounter from \"../thunk/fetchCounter\";\n\n// Define a type for the slice state\ninterface CounterState {\n  /** 表示するメッセージ */\n  message: string;\n  /** プログレスフラグ */\n  progress: boolean;\n  /** カウント値 */\n  count: number;\n  /** 確率 */\n  percent: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  message: \"\",\n  progress: false,\n  count: 0,\n  percent: 50,\n};\nconst countSlice = createSlice({\n  name: \"count\",\n  initialState,\n  reducers: {\n    setShowingPercent: (state, action: PayloadAction<number>) => {\n      state.percent = action.payload;\n    },\n    setProgress: (state, action: PayloadAction<boolean>) => {\n      state.progress = action.payload;\n    },\n    setMessasge: (state, action: PayloadAction<string>) => {\n      state.message = action.payload;\n    },\n    increment: (state) => {\n      state.count += 1;\n    },\n    decrement: (state) => {\n      state.count -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.count += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchLastCounter.pending, (state, action) => ({\n      ...state,\n      message: `判定中です。${action.meta.arg.second}秒後に${action.meta.arg.percent}%の確率で${action.meta.arg.value}増えます。`,\n    }));\n    builder.addCase(fetchLastCounter.fulfilled, (state, action) => ({\n      ...state,\n      count: state.count + action.payload.count,\n      message: `判定に成功しました。${action.payload.count}増えました。`,\n    }));\n    builder.addCase(fetchLastCounter.rejected, (state) => ({\n      ...state,\n      message: \"判定に失敗しました。1減りました。\",\n      count: state.count - 1,\n    }));\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  setMessasge,\n  setProgress,\n  setShowingPercent,\n} = countSlice.actions;\n\nconst countReducer = countSlice.reducer;\nexport default countReducer;\n","import {\n  Button,\n  CircularProgress,\n  Slider,\n  Typography,\n} from \"@material-ui/core\";\nimport { shallowEqual } from \"react-redux\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport {\n  decrement,\n  increment,\n  setShowingPercent,\n} from \"../../redux/state/count\";\nimport { RootState } from \"../../redux/store\";\nimport fetchLastCounter from \"../../redux/thunk/fetchCounter\";\nimport \"./Count.scss\";\n\nfunction Count(): JSX.Element {\n  const { countState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <p>{countState.count}</p>\n      <p>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            dispatch(increment());\n          }}\n          variant=\"contained\"\n        >\n          増やす\n        </Button>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            dispatch(decrement());\n          }}\n          variant=\"contained\"\n        >\n          減らす\n        </Button>\n      </p>\n      <Typography id=\"percent-slider-label\">\n        確率：{countState.percent}%\n      </Typography>\n      <Slider\n        aria-labelledby=\"percent-slider-label\"\n        className=\"Count-percent-slider\"\n        disabled={countState.progress}\n        max={100}\n        min={0}\n        onChange={(e, newValue: number | number[]) =>\n          dispatch(setShowingPercent(newValue as number))\n        }\n        value={countState.percent}\n        valueLabelDisplay=\"off\"\n      />\n      <p>\n        <Button\n          color=\"default\"\n          disabled={countState.progress}\n          onClick={() => {\n            dispatch(\n              fetchLastCounter({\n                percent: countState.percent,\n                value: 100,\n                second: 3,\n              })\n            );\n          }}\n          variant=\"contained\"\n        >\n          非同期\n        </Button>\n      </p>\n      <Typography color=\"error\">{countState.message}</Typography>\n      {countState.progress && <CircularProgress />}\n    </>\n  );\n}\n\nexport default Count;\n","import Count from \"./Count\";\n\nexport default Count;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// Define a type for the slice state\ninterface SpinLogoState {\n  /** ロゴ回転フラグ */\n  spin: boolean;\n}\n\n// Define the initial state using that type\nconst initialState: SpinLogoState = {\n  spin: false,\n};\nconst spinLogoSlice = createSlice({\n  name: \"spinLogo\",\n  initialState,\n  reducers: {\n    setSpinLogo: (state, action: PayloadAction<typeof state.spin>) => {\n      state.spin = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setSpinLogo } = spinLogoSlice.actions;\n\nconst spinLogoReducer = spinLogoSlice.reducer;\nexport default spinLogoReducer;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Button } from \"@material-ui/core\";\nimport { shallowEqual } from \"react-redux\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { setSpinLogo } from \"../../redux/state/spinLogo\";\nimport { RootState } from \"../../redux/store\";\nimport logo from \"./logo.svg\";\nimport \"./SpinLogo.scss\";\n\nfunction SpinLogo(): JSX.Element {\n  const { spinLogoState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <img\n        alt=\"logo\"\n        className={spinLogoState.spin ? \"SpinLogo-logo-spin\" : \"SpinLogo-logo\"}\n        src={logo}\n      />\n      <p>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            dispatch(setSpinLogo(!spinLogoState.spin));\n          }}\n          variant=\"contained\"\n        >\n          {spinLogoState.spin ? \"止める\" : \"まわす\"}\n        </Button>\n      </p>\n    </>\n  );\n}\n\nexport default SpinLogo;\n","import SpinLogo from \"./SpinLogo\";\n\nexport default SpinLogo;\n","import { Autorenew, ExposurePlus1 } from \"@material-ui/icons\";\nimport { menuComponents } from \"../../redux/state/app\";\nimport Count from \"../Count\";\nimport SpinLogo from \"../SpinLogo\";\n\n/**\n * メニューアイテム一覧\n */\nconst MenuItems: {\n  [menu in menuComponents]: {\n    component: JSX.Element;\n    name: string;\n    icon: JSX.Element;\n  };\n} = {\n  count: {\n    component: <Count />,\n    name: \"カウントアップ\",\n    icon: <ExposurePlus1 />,\n  },\n  spinLogo: {\n    component: <SpinLogo />,\n    name: \"ロゴまわし\",\n    icon: <Autorenew />,\n  },\n};\n\nexport default MenuItems;\n","import {\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { Cancel, Menu as MenuIcon } from \"@material-ui/icons\";\nimport { shallowEqual } from \"react-redux\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\nimport { menuList, setComponent, setOpenMenu } from \"../../redux/state/app\";\nimport { RootState } from \"../../redux/store\";\nimport \"./Menu.scss\";\nimport MenuItems from \"./MenuItems\";\n\nfunction Menu(): JSX.Element {\n  const { appState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      <div className=\"Menu\">\n        <IconButton onClick={() => dispatch(setOpenMenu(!appState.openMenu))}>\n          <MenuIcon />\n        </IconButton>\n      </div>\n      <Drawer\n        anchor=\"left\"\n        onClose={() => dispatch(setOpenMenu(false))}\n        open={appState.openMenu}\n      >\n        <div onKeyDown={() => dispatch(setOpenMenu(false))} role=\"presentation\">\n          <List>\n            <ListItem\n              button\n              onClick={() => {\n                dispatch(setOpenMenu(false));\n              }}\n            >\n              <ListItemIcon>\n                <Cancel />\n              </ListItemIcon>\n              <ListItemText primary=\"閉じる\" />\n            </ListItem>\n          </List>\n          <Divider />\n          <List>\n            {menuList.map((menu) => (\n              <ListItem\n                button\n                key={menu}\n                onClick={() => {\n                  dispatch(setComponent(menu));\n                  dispatch(setOpenMenu(false));\n                }}\n              >\n                <ListItemIcon>{MenuItems[menu].icon}</ListItemIcon>\n                <ListItemText primary={MenuItems[menu].name} />\n              </ListItem>\n            ))}\n          </List>\n        </div>\n      </Drawer>\n    </>\n  );\n}\n\nexport default Menu;\n","import Menu from \"./Menu\";\n\nexport default Menu;\n","import React from \"react\";\nimport { shallowEqual } from \"react-redux\";\nimport \"./App.scss\";\nimport Menu from \"./components/Menu\";\nimport MenuItems from \"./components/Menu/MenuItems\";\nimport { useAppSelector } from \"./redux/hooks\";\nimport { RootState } from \"./redux/store\";\n\nfunction App(): JSX.Element {\n  const { appState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  return (\n    <>\n      <React.StrictMode>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {MenuItems[appState.component].component}\n          </header>\n        </div>\n      </React.StrictMode>\n      <Menu />\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport appReducer from \"./state/app\";\nimport countReducer from \"./state/count\";\nimport spinLogoReducer from \"./state/spinLogo\";\n\nexport const store = configureStore({\n  reducer: {\n    countState: countReducer,\n    appState: appReducer,\n    spinLogoState: spinLogoReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}