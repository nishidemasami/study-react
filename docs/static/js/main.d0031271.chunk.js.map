{"version":3,"sources":["logo.svg","redux/hooks.ts","redux/thunk/fetchCounter.ts","redux/state/count.ts","App.tsx","redux/store.ts","index.tsx"],"names":["useAppSelector","useSelector","judgment","percent","second","Promise","resolve","setTimeout","Math","random","fetchCounter","createAsyncThunk","arg","thunk","a","dispatch","setProgress","res","count","value","Error","countSlice","createSlice","name","initialState","message","progress","reducers","setShowingPercent","state","action","payload","setMessasge","increment","decrement","incrementByAmount","extraReducers","builder","addCase","fetchLastCounter","pending","meta","fulfilled","rejected","actions","countReducer","reducer","App","countState","shallowEqual","useDispatch","useState","spin","setSpin","className","alt","src","logo","Button","color","onClick","variant","Typography","id","Slider","aria-labelledby","disabled","max","min","onChange","e","newValue","valueLabelDisplay","CircularProgress","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0031271.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setProgress } from \"../state/count\";\n\n/**\n * 遅延判定メソッド\n * @param percent 確率\n * @param second 秒数\n * @remarks\n * second秒後にpercent%の確率でtrueを返し、\n * でなければfalseを返す\n */\nconst judgment = (percent: number, second: number) =>\n  new Promise<boolean>((resolve) => {\n    setTimeout(() => {\n      resolve(Math.random() < percent / 100);\n    }, second * 1000);\n  });\n\ntype fetchCounterArgType = {\n  /** 増える確率 */\n  percent: number;\n  /** 秒数 */\n  second: number;\n  /** 値 */\n  value: number;\n};\n\ntype fetchCounterReturnType = {\n  /** 増減値 */\n  count: number;\n};\n\n/**\n * 遅延増減メソッド\n * @remarks\n * 渡された秒数後に渡された確率で渡された値を返し、\n * でなければ例外を返す\n */\nconst fetchCounter = createAsyncThunk<\n  fetchCounterReturnType,\n  fetchCounterArgType\n>(\n  \"lastcount/fetch\",\n  async (arg, thunk): Promise<fetchCounterReturnType> => {\n    thunk.dispatch(setProgress(true));\n\n    const res = await judgment(arg.percent, arg.second);\n\n    thunk.dispatch(setProgress(false));\n\n    if (res) {\n      return { count: arg.value };\n    }\n\n    throw new Error(\"fetch count error\");\n  }\n);\n\nexport default fetchCounter;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fetchLastCounter from \"../thunk/fetchCounter\";\n\n// Define a type for the slice state\ninterface CounterState {\n  /** 表示するメッセージ */\n  message: string;\n  /** プログレスフラグ */\n  progress: boolean;\n  /** カウント値 */\n  count: number;\n  /** 確率 */\n  percent: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  message: \"\",\n  progress: false,\n  count: 0,\n  percent: 50,\n};\nexport const countSlice = createSlice({\n  name: \"count\",\n  initialState,\n  reducers: {\n    setShowingPercent: (state, action: PayloadAction<number>) => {\n      state.percent = action.payload;\n    },\n    setProgress: (state, action: PayloadAction<boolean>) => {\n      state.progress = action.payload;\n    },\n    setMessasge: (state, action: PayloadAction<string>) => {\n      state.message = action.payload;\n    },\n    increment: (state) => {\n      state.count += 1;\n    },\n    decrement: (state) => {\n      state.count -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.count += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchLastCounter.pending, (state, action) => ({\n      ...state,\n      message: `判定中です。${action.meta.arg.second}秒後に${action.meta.arg.percent}%の確率で${action.meta.arg.value}増えます。`,\n    }));\n    builder.addCase(fetchLastCounter.fulfilled, (state, action) => ({\n      ...state,\n      count: state.count + action.payload.count,\n      message: `判定に成功しました。${action.payload.count}増えました。`,\n    }));\n    builder.addCase(fetchLastCounter.rejected, (state) => ({\n      ...state,\n      message: \"判定に失敗しました。1減りました。\",\n      count: state.count - 1,\n    }));\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  setMessasge,\n  setProgress,\n  setShowingPercent,\n} = countSlice.actions;\n\nconst countReducer = countSlice.reducer;\nexport default countReducer;\n","import {\n  Button,\n  CircularProgress,\n  Slider,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { shallowEqual } from \"react-redux\";\nimport \"./App.scss\";\nimport logo from \"./logo.svg\";\nimport { useAppDispatch, useAppSelector } from \"./redux/hooks\";\nimport { decrement, increment, setShowingPercent } from \"./redux/state/count\";\nimport { RootState } from \"./redux/store\";\nimport fetchLastCounter from \"./redux/thunk/fetchCounter\";\n\nfunction App(): JSX.Element {\n  const { countState } = useAppSelector(\n    (state: RootState) => state,\n    shallowEqual\n  );\n  const dispatch = useAppDispatch();\n\n  /** まわるかどうかフラグ */\n  const [spin, setSpin] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img\n          alt=\"logo\"\n          className={spin ? \"App-logo-spin\" : \"App-logo\"}\n          src={logo}\n        />\n        <p>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              setSpin(!spin);\n            }}\n            variant=\"contained\"\n          >\n            {spin ? \"止める\" : \"まわす\"}\n          </Button>\n        </p>\n        <p>{countState.count}</p>\n        <p>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(increment());\n            }}\n            variant=\"contained\"\n          >\n            増やす\n          </Button>\n          <Button\n            color=\"secondary\"\n            onClick={() => {\n              dispatch(decrement());\n            }}\n            variant=\"contained\"\n          >\n            減らす\n          </Button>\n        </p>\n        <Typography id=\"percent-slider-label\">\n          確率：{countState.percent}%\n        </Typography>\n        <Slider\n          aria-labelledby=\"percent-slider-label\"\n          className=\"App-percent-slider\"\n          disabled={countState.progress}\n          max={100}\n          min={0}\n          onChange={(e, newValue: number | number[]) =>\n            dispatch(setShowingPercent(newValue as number))\n          }\n          value={countState.percent}\n          valueLabelDisplay=\"off\"\n        />\n        <p>\n          <Button\n            color=\"default\"\n            disabled={countState.progress}\n            onClick={() => {\n              dispatch(\n                fetchLastCounter({\n                  percent: countState.percent,\n                  value: 100,\n                  second: 3,\n                })\n              );\n            }}\n            variant=\"contained\"\n          >\n            非同期\n          </Button>\n        </p>\n        <Typography color=\"error\">{countState.message}</Typography>\n        {countState.progress && <CircularProgress />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport countReducer from \"./state/count\";\n\nexport const store = configureStore({\n  reducer: {\n    countState: countReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}