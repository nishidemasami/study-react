{"version":3,"sources":["redux/hooks.ts","redux/state/app.ts","redux/thunk/fetchCounter.ts","redux/state/count.ts","components/Count/Count.tsx","components/Count/index.ts","redux/state/spinLogo.ts","components/SpinLogo/logo.svg","components/SpinLogo/SpinLogo.tsx","components/SpinLogo/index.ts","components/Menu/MenuItems.tsx","components/Menu/Menu.tsx","components/Menu/index.ts","App.tsx","redux/store.ts","index.tsx"],"names":["useDispatch","dispatch","useSelector","selector","menuList","appSlice","createSlice","name","initialState","openMenu","component","reducers","setOpenMenu","state","action","payload","setComponent","actions","appReducer","reducer","judgment","percent","second","a","Promise","resolve","reject","setTimeout","Math","random","Error","fetchCounter","createAsyncThunk","arg","thunk","setProgress","catch","res","count","value","countSlice","message","progress","setShowingPercent","setMessasge","increment","decrement","incrementByAmount","extraReducers","builder","addCase","fetchLastCounter","pending","meta","fulfilled","rejected","countReducer","GoodWidthSlider","styled","Slider","Count","countState","shallowEqual","Button","color","onClick","variant","Typography","id","disabled","max","min","onChange","e","newValue","valueLabelDisplay","CircularProgress","spinLogoSlice","spin","setSpinLogo","spinLogoReducer","RollingImage","img","SpinLogo","spinLogoState","alt","src","logo","MenuItems","icon","ExposurePlus1","spinLogo","Autorenew","LeftUpperFixedDiv","div","Menu","appState","IconButton","Drawer","anchor","onClose","open","onKeyDown","role","List","ListItem","button","ListItemIcon","Cancel","ListItemText","primary","Divider","map","menu","AppDiv","MainHeader","header","App","StrictMode","href","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34e00979.chunk.js","sourcesContent":["import {\n\tTypedUseSelectorHook,\n\tuseDispatch as dispatch,\n\tuseSelector as selector,\n} from \"react-redux\";\nimport { RootState, store } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useDispatch = () => dispatch<typeof store.dispatch>();\nexport const useSelector: TypedUseSelectorHook<RootState> = selector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n/** メニュー一覧タイプ */\nexport type menuComponents = \"count\" | \"spinLogo\";\n\n/** メニューリスト */\nexport const menuList: menuComponents[] = [\"count\", \"spinLogo\"];\n\n// Define a type for the slice state\ninterface AppState {\n\t/** メニューを表示するかどうか */\n\topenMenu: boolean;\n\t/** 表示するコンポーネント */\n\tcomponent: menuComponents;\n}\n\n// Define the initial state using that type\nconst initialState: AppState = {\n\topenMenu: false,\n\tcomponent: \"count\",\n};\n\nconst appSlice = createSlice({\n\tname: \"app\",\n\tinitialState,\n\treducers: {\n\t\tsetOpenMenu: (state, action: PayloadAction<typeof state.openMenu>) => {\n\t\t\tstate.openMenu = action.payload;\n\t\t},\n\t\tsetComponent: (state, action: PayloadAction<typeof state.component>) => {\n\t\t\tstate.component = action.payload;\n\t\t},\n\t},\n});\n\n// Action creators are generated for each case reducer function\nexport const { actions } = appSlice;\n\nconst appReducer = appSlice.reducer;\nexport default appReducer;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { actions } from \"../state/count\";\n\n/**\n * 遅延判定メソッド\n * @param percent 確率\n * @param second 秒数\n * @remarks\n * second秒後にpercent%の確率でtrueを返し、\n * でなければrejectする\n */\nconst judgment = async (percent: number, second: number) =>\n\tnew Promise<boolean>((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tif (Math.random() < percent / 100) {\n\t\t\t\tresolve(true);\n\t\t\t}\n\t\t\treject(new Error());\n\t\t}, second * 1000);\n\t});\n\ntype fetchCounterArgType = {\n\t/** 増える確率 */\n\tpercent: number;\n\t/** 秒数 */\n\tsecond: number;\n\t/** 値 */\n\tvalue: number;\n};\n\ntype fetchCounterReturnType = {\n\t/** 増減値 */\n\tcount: number;\n};\n\n/**\n * 遅延増減メソッド\n * @remarks\n * 渡された秒数後に渡された確率で渡された値を返し、\n * でなければ例外を返す\n */\nconst fetchCounter = createAsyncThunk<\n\tfetchCounterReturnType,\n\tfetchCounterArgType\n>(\"lastcount/fetch\", async (arg, thunk): Promise<fetchCounterReturnType> => {\n\tthunk.dispatch(actions.setProgress(true));\n\n\tconst res = await judgment(arg.percent, arg.second).catch(() => false);\n\n\tthunk.dispatch(actions.setProgress(false));\n\n\tif (res) {\n\t\treturn { count: arg.value };\n\t}\n\n\tthrow new Error(\"fetch count error\");\n});\n\nexport default fetchCounter;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fetchLastCounter from \"../thunk/fetchCounter\";\n\n// Define a type for the slice state\ninterface CounterState {\n\t/** 表示するメッセージ */\n\tmessage: string;\n\t/** プログレスフラグ */\n\tprogress: boolean;\n\t/** カウント値 */\n\tcount: number;\n\t/** 確率 */\n\tpercent: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n\tmessage: \"\",\n\tprogress: false,\n\tcount: 0,\n\tpercent: 50,\n};\nconst countSlice = createSlice({\n\tname: \"count\",\n\tinitialState,\n\treducers: {\n\t\t/** 確率を設定する */\n\t\tsetShowingPercent: (state, action: PayloadAction<number>) => {\n\t\t\tstate.percent = action.payload;\n\t\t},\n\t\tsetProgress: (state, action: PayloadAction<boolean>) => {\n\t\t\tstate.progress = action.payload;\n\t\t},\n\t\tsetMessasge: (state, action: PayloadAction<string>) => {\n\t\t\tstate.message = action.payload;\n\t\t},\n\t\tincrement: (state) => {\n\t\t\tstate.count += 1;\n\t\t},\n\t\tdecrement: (state) => {\n\t\t\tstate.count -= 1;\n\t\t},\n\t\tincrementByAmount: (state, action: PayloadAction<number>) => {\n\t\t\tstate.count += action.payload;\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(fetchLastCounter.pending, (state, action) => ({\n\t\t\t...state,\n\t\t\tmessage: `判定中です。${action.meta.arg.second}秒後に${action.meta.arg.percent}%の確率で${action.meta.arg.value}増えます。`,\n\t\t}));\n\t\tbuilder.addCase(fetchLastCounter.fulfilled, (state, action) => ({\n\t\t\t...state,\n\t\t\tcount: state.count + action.payload.count,\n\t\t\tmessage: `判定に成功しました。${action.payload.count}増えました。`,\n\t\t}));\n\t\tbuilder.addCase(fetchLastCounter.rejected, (state) => ({\n\t\t\t...state,\n\t\t\tmessage: \"判定に失敗しました。1減りました。\",\n\t\t\tcount: state.count - 1,\n\t\t}));\n\t},\n});\n\n// Action creators are generated for each case reducer function\nexport const { actions } = countSlice;\n\nconst countReducer = countSlice.reducer;\nexport default countReducer;\n","import {\n\tButton,\n\tCircularProgress,\n\tSlider,\n\tTypography,\n} from \"@material-ui/core\";\nimport { shallowEqual } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"../../redux/hooks\";\nimport { actions } from \"../../redux/state/count\";\nimport { RootState } from \"../../redux/store\";\nimport fetchLastCounter from \"../../redux/thunk/fetchCounter\";\n\n/** 良い幅のスライダー */\nconst GoodWidthSlider = styled(Slider)`\n\tmax-width: 40vmin;\n`;\n\nconst Count: React.VFC = () => {\n\tconst { countState } = useSelector((state: RootState) => state, shallowEqual);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<>\n\t\t\t<p>{countState.count}</p>\n\t\t\t<p>\n\t\t\t\t<Button\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tdispatch(actions.increment());\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t>\n\t\t\t\t\t増やす\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tdispatch(actions.decrement());\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t>\n\t\t\t\t\t減らす\n\t\t\t\t</Button>\n\t\t\t</p>\n\t\t\t<Typography id=\"percent-slider-label\">\n\t\t\t\t確率：{countState.percent}%\n\t\t\t</Typography>\n\t\t\t<GoodWidthSlider\n\t\t\t\taria-labelledby=\"percent-slider-label\"\n\t\t\t\tdisabled={countState.progress}\n\t\t\t\tmax={100}\n\t\t\t\tmin={0}\n\t\t\t\tonChange={(e, newValue: number | number[]) =>\n\t\t\t\t\tdispatch(actions.setShowingPercent(newValue as number))\n\t\t\t\t}\n\t\t\t\tvalue={countState.percent}\n\t\t\t\tvalueLabelDisplay=\"off\"\n\t\t\t/>\n\t\t\t<p>\n\t\t\t\t<Button\n\t\t\t\t\tcolor=\"default\"\n\t\t\t\t\tdisabled={countState.progress}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tfetchLastCounter({\n\t\t\t\t\t\t\t\tpercent: countState.percent,\n\t\t\t\t\t\t\t\tvalue: 100,\n\t\t\t\t\t\t\t\tsecond: 3,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t>\n\t\t\t\t\t非同期\n\t\t\t\t</Button>\n\t\t\t</p>\n\t\t\t<Typography color=\"error\">{countState.message}</Typography>\n\t\t\t{countState.progress && <CircularProgress />}\n\t\t</>\n\t);\n};\n\nexport default Count;\n","import Count from \"./Count\";\n\nexport default Count;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// Define a type for the slice state\ninterface SpinLogoState {\n\t/** ロゴ回転フラグ */\n\tspin: boolean;\n}\n\n// Define the initial state using that type\nconst initialState: SpinLogoState = {\n\tspin: false,\n};\nconst spinLogoSlice = createSlice({\n\tname: \"spinLogo\",\n\tinitialState,\n\treducers: {\n\t\tsetSpinLogo: (state, action: PayloadAction<typeof state.spin>) => {\n\t\t\tstate.spin = action.payload;\n\t\t},\n\t},\n});\n\n// Action creators are generated for each case reducer function\nexport const { actions } = spinLogoSlice;\n\nconst spinLogoReducer = spinLogoSlice.reducer;\nexport default spinLogoReducer;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { shallowEqual } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"../../redux/hooks\";\nimport { actions } from \"../../redux/state/spinLogo\";\nimport { RootState } from \"../../redux/store\";\nimport logo from \"./logo.svg\";\n\n/** まわるdiv */\nconst RollingImage = styled.img`\n\theight: 40vmin;\n\tpointer-events: none;\n\n\t&[data-spinning=\"true\"] {\n\t\tanimation: App-logo-spin infinite 1s linear;\n\t}\n\n\t@keyframes App-logo-spin {\n\t\tfrom {\n\t\t\ttransform: rotate(0deg);\n\t\t}\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n`;\n\nconst SpinLogo: React.VFC = () => {\n\tconst { spinLogoState } = useSelector(\n\t\t(state: RootState) => state,\n\t\tshallowEqual\n\t);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<>\n\t\t\t<RollingImage alt=\"logo\" data-spinning={spinLogoState.spin} src={logo} />\n\t\t\t<p>\n\t\t\t\t<Button\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tdispatch(actions.setSpinLogo(!spinLogoState.spin));\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t>\n\t\t\t\t\t{spinLogoState.spin ? \"止める\" : \"まわす\"}\n\t\t\t\t</Button>\n\t\t\t</p>\n\t\t</>\n\t);\n};\n\nexport default SpinLogo;\n","import SpinLogo from \"./SpinLogo\";\n\nexport default SpinLogo;\n","import { Autorenew, ExposurePlus1 } from \"@material-ui/icons\";\nimport { menuComponents } from \"../../redux/state/app\";\nimport Count from \"../Count\";\nimport SpinLogo from \"../SpinLogo\";\n\n/**\n * メニューアイテム一覧\n */\nconst MenuItems: {\n\t[menu in menuComponents]: {\n\t\tcomponent: JSX.Element;\n\t\tname: string;\n\t\ticon: JSX.Element;\n\t};\n} = {\n\tcount: {\n\t\tcomponent: <Count />,\n\t\tname: \"カウントアップ\",\n\t\ticon: <ExposurePlus1 />,\n\t},\n\tspinLogo: {\n\t\tcomponent: <SpinLogo />,\n\t\tname: \"ロゴまわし\",\n\t\ticon: <Autorenew />,\n\t},\n};\n\nexport default MenuItems;\n","import {\n\tDivider,\n\tDrawer,\n\tIconButton,\n\tList,\n\tListItem,\n\tListItemIcon,\n\tListItemText,\n} from \"@material-ui/core\";\nimport { Cancel, Menu as MenuIcon } from \"@material-ui/icons\";\nimport { shallowEqual } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"../../redux/hooks\";\nimport { actions, menuList } from \"../../redux/state/app\";\nimport { RootState } from \"../../redux/store\";\nimport MenuItems from \"./MenuItems\";\n\n/** 左上端に固定されたdiv */\nconst LeftUpperFixedDiv = styled.div`\n\tposition: fixed;\n\ttop: 0px;\n\tleft: 0px;\n`;\n\nconst Menu: React.VFC = () => {\n\tconst { appState } = useSelector((state: RootState) => state, shallowEqual);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<>\n\t\t\t<LeftUpperFixedDiv>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={() => dispatch(actions.setOpenMenu(!appState.openMenu))}\n\t\t\t\t>\n\t\t\t\t\t<MenuIcon />\n\t\t\t\t</IconButton>\n\t\t\t</LeftUpperFixedDiv>\n\t\t\t<Drawer\n\t\t\t\tanchor=\"left\"\n\t\t\t\tonClose={() => dispatch(actions.setOpenMenu(false))}\n\t\t\t\topen={appState.openMenu}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tonKeyDown={() => dispatch(actions.setOpenMenu(false))}\n\t\t\t\t\trole=\"presentation\"\n\t\t\t\t>\n\t\t\t\t\t<List>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tdispatch(actions.setOpenMenu(false));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t<Cancel />\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t<ListItemText primary=\"閉じる\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t</List>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<List>\n\t\t\t\t\t\t{menuList.map((menu) => (\n\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\tkey={menu}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tdispatch(actions.setComponent(menu));\n\t\t\t\t\t\t\t\t\tdispatch(actions.setOpenMenu(false));\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ListItemIcon>{MenuItems[menu].icon}</ListItemIcon>\n\t\t\t\t\t\t\t\t<ListItemText primary={MenuItems[menu].name} />\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</List>\n\t\t\t\t</div>\n\t\t\t</Drawer>\n\t\t</>\n\t);\n};\n\nexport default Menu;\n","import Menu from \"./Menu\";\n\nexport default Menu;\n","import React from \"react\";\nimport { shallowEqual } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Menu from \"./components/Menu\";\nimport MenuItems from \"./components/Menu/MenuItems\";\nimport { useSelector } from \"./redux/hooks\";\nimport { RootState } from \"./redux/store\";\n\n/** アプリケーションのdiv */\nconst AppDiv = styled.div`\n\ttext-align: center;\n\tp {\n\t\tmargin: 2px;\n\t}\n\ta {\n\t\tcolor: #004457;\n\t}\n`;\n\n/** メインのheader */\nconst MainHeader = styled.header`\n\tbackground-color: #e6eeff;\n\tposition: absolute;\n\twidth: 100vw;\n\theight: 100vh;\n\theight: -webkit-fill-available;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: calc(10px + 2vmin);\n\tcolor: black;\n`;\n\nconst App: React.VFC = () => {\n\tconst { appState } = useSelector((state: RootState) => state, shallowEqual);\n\treturn (\n\t\t<>\n\t\t\t<React.StrictMode>\n\t\t\t\t<AppDiv>\n\t\t\t\t\t<MainHeader>\n\t\t\t\t\t\t「\n\t\t\t\t\t\t<a href=\"https://github.com/nishidemasami/study-react\">\n\t\t\t\t\t\t\thttps://github.com/nishidemasami/study-react\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t」を参照して下さい\n\t\t\t\t\t\t{MenuItems[appState.component].component}\n\t\t\t\t\t</MainHeader>\n\t\t\t\t</AppDiv>\n\t\t\t</React.StrictMode>\n\t\t\t<Menu />\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport appReducer from \"./state/app\";\nimport countReducer from \"./state/count\";\nimport spinLogoReducer from \"./state/spinLogo\";\n\nexport const store = configureStore({\n\treducer: {\n\t\tcountState: countReducer,\n\t\tappState: appReducer,\n\t\tspinLogoState: spinLogoReducer,\n\t},\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n","import ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}